apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.microservice.name }}
  namespace: {{ .Values.microservice.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Values.microservice.name }}
  serviceName: {{ .Values.microservice.name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: micros
        app.kubernetes.io/component: persistence
        app.kubernetes.io/instance: {{ .Values.microservice.name }}
    spec:
      hostname: msg-broker-rabbit
      containers:
        - name: {{ .Values.microservice.name }}
          image: {{ .Values.workload.image }}
          resources:
            requests:
              memory: {{ .Values.workload.resources.requests.memory }}
              cpu: {{ .Values.workload.resources.requests.cpu }}
            limits:
              memory: {{ .Values.workload.resources.limits.memory }}
          ports:
            - containerPort: {{ .Values.workload.portMetrics }} # Prometheus metrics
            - containerPort: {{ .Values.workload.portAmpq }} # AMPQ
            - containerPort: {{ .Values.workload.portGui }} # GUI
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "rabbitmq-diagnostics -q ping || exit 1"
            initialDelaySeconds: {{ .Values.workload.livenessDelay }}
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "rabbitmq-diagnostics -q ping || exit 1"
            initialDelaySeconds: {{ .Values.workload.readinessDelay }}
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          volumeMounts:
            - name: rabbitmq-persistent-storage
              mountPath: /var/lib/rabbitmq
  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-persistent-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
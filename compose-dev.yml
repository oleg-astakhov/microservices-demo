services:
  frontend:
    environment:
      SPRING_PROFILE: composedev
    build:
      context: ./frontend
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost || exit 1" ]
      interval: 30s
      retries: 3
      start_period: 40s
      timeout: 10s
  gateway:
    environment:
      SPRING_PROFILE: composedev
    build:
      context: ./gateway
  quiz:
    environment:
      SPRING_PROFILE: composedev
    volumes:
      - dev-micros-log-vol:/var/log/quiz
    build:
      context: ./quiz
  gamification:
    environment:
      SPRING_PROFILE: composedev
    build:
      context: ./gamification
  database:
    ports:
      - 5433:5432  # Main port
    volumes:
      - dev-micros-postgres-db-vol:/var/lib/postgresql/data
    build:
      context: ./database
  message-broker:
    ports:
      - 5672:5672 # AMPQ
      - 15672:15672 # GUI
    volumes:
      - dev-micros-rabbitmq-vol:/var/lib/rabbitmq

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init-tracing:
    image: &tempoImage grafana/tempo:2.6.1
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/tmp/tempo"
    volumes:
      - dev-tracing-persistent-data:/tmp/tempo

  tracing:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./observability/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
      - dev-tracing-persistent-data:/tmp/tempo
    ports:
      - "9411:9411" # push traces here with zipkin protocol
      - "3200:3200" # querying tempo for traces, e.g. from Grafana
    networks:
      - backend-network
      - common-network

  log-storage:
    image: grafana/loki:3.1.2
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100" # loki needs to be exposed so it receives logs
    networks:
      - backend-network
      - common-network

  metrics:
    image: prom/prometheus:v2.55.0
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - backend-network
      - common-network

  node-exporter:
    image: prom/node-exporter:v1.8.2
    ports:
      - "9100:9100"
    networks:
      - backend-network
      - common-network

  observability-visualization:
    image: grafana/grafana:11.3.0
    volumes:
      - ./observability/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./observability/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    networks:
      - backend-network
      - common-network

  log-forward:
    image: fluent/fluent-bit:3.1.9
    volumes:
      - ./observability/fluentbit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./observability/fluentbit/micros-parsers.conf:/fluent-bit/etc/micros-parsers.conf:ro
      - dev-micros-log-vol:/etc/micros-log-data
    networks:
      - backend-network
      - common-network

# Prometheus: http://localhost:9090/
# Grafana: http://localhost:3000/

volumes:
  # note: names are optional, but without explicit names Docker will prefix the volume with project name
  dev-micros-postgres-db-vol:
    name: dev-micros-postgres-db-vol
  dev-micros-rabbitmq-vol:
    name: dev-micros-rabbitmq-vol
  dev-micros-log-vol:
    name: dev-micros-log-vol
  dev-tracing-persistent-data:
    name: dev-tracing-persistent-data